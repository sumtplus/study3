package xyz.sumtplus.controller;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;
import xyz.sumtplus.domain.Criteria;
import xyz.sumtplus.domain.MemberVO;
import xyz.sumtplus.domain.PageDTO;
import xyz.sumtplus.domain.RegInfoVO;
import xyz.sumtplus.service.AdminService;

/**
 * 현재 페이지 매핑만 작성, 차후 수정처리도 여기서 할 것임
 *
 * @author 박재우
 * @Date   2021. 5. 18.
 */
@Controller
@Log4j
@RequestMapping("/admin/*")
@AllArgsConstructor
public class AdminController {
	private AdminService service;
	
	@GetMapping("admin")
	public void getAdmin(){
		log.warn("관리자 페이지");
	}
	
	@GetMapping("itemStatus")
	public void getItemStatus(Criteria cri, Model model){
		log.info("이용정보 페이지");
		model.addAttribute("status",service.itemStatus());
		model.addAttribute("cri", cri);
		model.addAttribute("pageMaker", new PageDTO(131, cri));
		
	}
	
	@GetMapping("memberList")
	public void getMemberList(Criteria cri, Model model){
		log.info("회원목록" + cri + "페이지");		
		model.addAttribute("list",service.memberList(cri));
		model.addAttribute("cri", cri);
		model.addAttribute("pageMaker", new PageDTO(service.getMemberTotal(cri), cri));
	}
	
	@GetMapping("memberDetail")
	public void getMemberDetail(@RequestParam int userNo, @ModelAttribute("cri") Criteria cri, Model model){
		log.info("회원상세정보 페이지");
		model.addAttribute("member", service.memberDetail(userNo));
		model.addAttribute("cri", cri);
	}
	
	@GetMapping("paymentList")
	public void getPaymentList(Criteria cri, Model model){
		log.info("결제내역 페이지");	
		model.addAttribute("list",service.paymentList(cri));
		model.addAttribute("cri", cri);
		model.addAttribute("pageMaker", new PageDTO(service.getPaymentTotalCount(cri), cri));
	}
	
	
	@GetMapping("regProperties")
	public void getRegProperties(Criteria cri, Model model){
		log.info("등록정보 페이지");					
		log.warn(service.regProperties(cri));
		model.addAttribute("list",service.regProperties(cri));
		model.addAttribute("cri", cri);
		model.addAttribute("period", service.getRegPeriod());
		model.addAttribute("pageMaker", new PageDTO(service.getRegTotalCount(cri), cri));
	}
	
	@GetMapping("regDetail")
	public void getRegDetail(@RequestParam int regNo, @ModelAttribute("cri") Criteria cri, Model model){
		log.info("등록 상세정보 페이지");
		model.addAttribute("regPP", service.regDetail(regNo));
		model.addAttribute("cri", cri);
	}
	
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@PostMapping("updateMember")
	public String updateMember(MemberVO memberVO, RedirectAttributes rttr) {
		log.info("회원 정보를 수정합니다...");
		log.info(memberVO);
		service.updateMember(memberVO);
		return "redirect:/admin/memberList";
	}
	
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@PostMapping("updateRegPP")
	public String updateRegPP(RegInfoVO regInfoVO, RedirectAttributes rttr){
		log.info("등록 상태를 수정합니다...");
		log.info(regInfoVO);
		service.updateRegPP(regInfoVO);
		return "redirect:/admin/regProperties";
	}

	
	
}
